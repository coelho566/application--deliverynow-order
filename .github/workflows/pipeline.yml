name: Push the Docker image to AWS ECR Repo
on:
  push:
    branches:
      - main
jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - run: mvn -B verify --file pom.xml
      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.0.1
      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4.4.0
        with:
          name: jacoco-report
          path: target/site/jacoco/

  sonar-analisys:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v4
      - name: Sonar Analisys
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - run: mvn -B clean verify --file pom.xml sonar:sonar -Dsonar.projectKey=application--deliverynow-order  -Dsonar.host.url=https://92e7-186-227-111-38.ngrok-free.app -Dsonar.login=sqp_b3904f5d56c3071939e909a60942069eb85ecd6e

  build:
    runs-on: ubuntu-latest
    needs: sonar-analisys
    #    needs: unit-test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

  deploy-ecr:
    name: Deploy AWS ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          QUARKUS_MONGODB_CONNECTION_STRING: ${{ secrets.QUARKUS_MONGODB_CONNECTION_STRING }}
          TOKEN_MERCADO_PAGO: ${{ secrets.TOKEN_MERCADO_PAGO }}
          USER_MERCADO_PAGO: ${{ secrets.USER_MERCADO_PAGO }}
          EXTERNAL_MERCADO_PAGO: ${{ secrets.EXTERNAL_MERCADO_PAGO }}
          IMAGE_TAG: latest
        run: |
          docker build -f src/main/docker/Dockerfile.jvm \
          --build-arg QUARKUS_MONGODB_CONNECTION_STRING=$QUARKUS_MONGODB_CONNECTION_STRING \
          --build-arg TOKEN_MERCADO_PAGO=$TOKEN_MERCADO_PAGO \
          --build-arg USER_MERCADO_PAGO=$USER_MERCADO_PAGO \
          --build-arg EXTERNAL_MERCADO_PAGO=$EXTERNAL_MERCADO_PAGO \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-eks:
    name: Deploy AWS EKS
    runs-on: ubuntu-latest
    needs: deploy-ecr
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Config EKS
        run: aws eks update-kubeconfig --name deliverynow-eks --region us-east-1

      - name: Clean pods to EKS
        run: |
          kubectl delete -k ./k8s
        continue-on-error: true

      - name: Deploy to EKS
        run: |
          kubectl apply -k ./k8s